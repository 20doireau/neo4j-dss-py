{
    /* Meta data for display purposes */
    "meta": {
        "label": "Neo4j",
        "description": "Dataiku macro to interact with a Neo4j graph database. Could be used for maintenance tasks for instance.",
        "icon": "icon-puzzle-piece"
    },
    "impersonate": false,
    "permissions": [],
    "resultType": "HTML",
    "resultLabel": "Cypher query results",

    /* for FILE resultType, the extension to use for the temp file */
    "extension": "txt",

    /* for FILE resultType, the type of data stored in the temp file */
    "mimeType": "text/plain",

    /* Macro roles define where this macro will appear in DSS GUI. They are used to pre-fill a macro parameter with context.

       Each role consists of:
        - type: where the macro will be shown
            * when selecting DSS object(s): DATASET, DATASETS, API_SERVICE, API_SERVICE_VERSION, BUNDLE, VISUAL_ANALYSIS, SAVED_MODEL, MANAGED_FOLDER
            * in the global project list: PROJECT_MACROS
        - targetParamsKey(s): name of the parameter(s) that will be filled with the selected object
    */
    "macroRoles": [
     /* {
            "type": "DATASET",
            "targetParamsKey": "input_dataset"
        } */
    ],

    /* The field "params" holds a list of all the params
       for wich the user will be prompted for values:

       The available parameter types are:
       STRING, INT, DOUBLE, BOOLEAN, PASSWORD, SELECT, MAP, TEXTAREA,
       DATASET, DATASETS, API_SERVICE, API_SERVICE_VERSION, BUNDLE, VISUAL_ANALYSIS, SAVED_MODEL, MANAGED_FOLDER
    */
    
    "params": [
        {
            "name": "parameter1",
            "label": "User-readable name",
            "type": "STRING",
            "description": "Some documentation for parameter1",
            "mandatory": true
        },
        {
            "name": "parameter2",
            "type": "INT",
            "defaultValue": 42
            /* Note that standard json parsing will return it as a double in Python (instead of an int), so you need to write
               int(self.config()['parameter2'])
            */
        },

        /* A "SELECT" parameter is a multi-choice selector. Choices are specified using the selectChoice field*/
        {
            "name": "parameter8",
            "type": "SELECT",
            "selectChoices": [
                {
                    "value": "val_x",
                    "label": "display name for val_x"
                },
                {
                    "value": "val_y",
                    "label": "display name for val_y"
                }
            ]
        }
    ]
}
